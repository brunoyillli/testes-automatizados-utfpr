package io.github.brunoyillli.craps;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import io.github.brunoyillli.craps.dominio.Dado;

public class CrapsTest {

	@Test
	public void jogadorGanhaPrimeiraRolagem() {
		Dado dadoMock = Mockito.mock(Dado.class);
		Mockito.when(dadoMock.rolar()).thenReturn(4,3);
		Craps craps = new Craps();
		craps.setDado(dadoMock);
		
		craps.rolarDados();
		Assertions.assertTrue(craps.isFimDeJogo());
		Assertions.assertEquals(1, craps.getVencedor());
	}
	
	@Test
	public void jogadorGanhaPrimeiraRolagemSegundaPossibilidade() {
		Dado dadoMock = Mockito.mock(Dado.class);
		Mockito.when(dadoMock.rolar()).thenReturn(5,6);
		Craps craps = new Craps();
		craps.setDado(dadoMock);
		
		craps.rolarDados();
		Assertions.assertTrue(craps.isFimDeJogo());
		Assertions.assertEquals(1, craps.getVencedor());
	}
	
	@Test
	public void bancaGanhaPrimeiraRolagem() {
		Dado dadoMock = Mockito.mock(Dado.class);
		Mockito.when(dadoMock.rolar()).thenReturn(1,1);
		Craps craps = new Craps();
		craps.setDado(dadoMock);
		
		craps.rolarDados();
		Assertions.assertTrue(craps.isFimDeJogo());
		Assertions.assertEquals(2, craps.getVencedor());
	}
	
	@Test
	public void bancaGanhaPrimeiraRolagemSegundaPossibilidade() {
		Dado dadoMock = Mockito.mock(Dado.class);
		Mockito.when(dadoMock.rolar()).thenReturn(1,1);
		Craps craps = new Craps();
		craps.setDado(dadoMock);
		
		craps.rolarDados();
		Assertions.assertTrue(craps.isFimDeJogo());
		Assertions.assertEquals(2, craps.getVencedor());
	}
}
